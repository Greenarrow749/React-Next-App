{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\ashish\\\\react-udemy-23-nextjs-main_proj\\\\pages\\\\index.js\",\n    _this = this;\n\nimport MeetupList from \"../components/meetups/MeetupList\";\nimport Head from \"next/head\";\nimport { Fragment } from \"react\";\n\nvar HomePage = function HomePage(props) {\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Head, {\n      children: /*#__PURE__*/_jsxDEV(\"title\", {\n        children: \"React.js Next.js meetup\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 10,\n        columnNumber: 9\n      }, _this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 7\n    }, _this), /*#__PURE__*/_jsxDEV(MeetupList, {\n      meetups: props.meetups\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 7\n    }, _this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 8,\n    columnNumber: 5\n  }, _this);\n}; // STATIC SITE GENERATION METHOD FOR PRE-RENDERING OF DATA (fxn needs to be named 'getStaticProps' only and it has to return an object\n// with 'props' as a property of that object, and this props object will further have the props that this component is gonna use.)\n// (This below fxn will execute even BEFORE the component returns any JSX, to be precise, DURING build process BEFORE deployment)\n// This means that this fxn will prepare reqd. props data before any rendering. This should be called in 'pages' folder only.\n\n\n_c = HomePage;\n// SERVER-SIDE RENDERING METHOD FOR PRE-RENDERING OF DATA (This fxn will not run during build process like SSG, but this will\n// always run on the server AFTER deployment, therefore through 'context' arg, it gives access to req and res)\n// export const getServerSideProps = async (context) => {\n//   //Fetch data from API\n//   const req = context.req;\n//   const res = context.res;\n//   return {\n//     props: {\n//       meetups: DUMMY_MEETS,\n//     },\n//   };\n// };\nexport var __N_SSG = true;\nexport default HomePage;\n\nvar _c;\n\n$RefreshReg$(_c, \"HomePage\");","map":{"version":3,"sources":["C:/Users/ashish/react-udemy-23-nextjs-main_proj/pages/index.js"],"names":["MeetupList","Head","Fragment","HomePage","props","meetups"],"mappings":";;;;;AAAA,OAAOA,UAAP,MAAuB,kCAAvB;AAEA,OAAOC,IAAP,MAAiB,WAAjB;AACA,SAASC,QAAT,QAAyB,OAAzB;;AAEA,IAAMC,QAAQ,GAAG,SAAXA,QAAW,CAACC,KAAD,EAAW;AAC1B,sBACE,QAAC,QAAD;AAAA,4BACE,QAAC,IAAD;AAAA,6BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,aADF,eAIE,QAAC,UAAD;AAAY,MAAA,OAAO,EAAEA,KAAK,CAACC;AAA3B;AAAA;AAAA;AAAA;AAAA,aAJF;AAAA;AAAA;AAAA;AAAA;AAAA,WADF;AAQD,CATD,C,CAWA;AACA;AACA;AACA;;;KAdMF,Q;AAuCN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAeA,QAAf","sourcesContent":["import MeetupList from \"../components/meetups/MeetupList\";\r\nimport { MongoClient } from \"mongodb\";\r\nimport Head from \"next/head\";\r\nimport { Fragment } from \"react\";\r\n\r\nconst HomePage = (props) => {\r\n  return (\r\n    <Fragment>\r\n      <Head>\r\n        <title>React.js Next.js meetup</title>\r\n      </Head>\r\n      <MeetupList meetups={props.meetups} />\r\n    </Fragment>\r\n  );\r\n};\r\n\r\n// STATIC SITE GENERATION METHOD FOR PRE-RENDERING OF DATA (fxn needs to be named 'getStaticProps' only and it has to return an object\r\n// with 'props' as a property of that object, and this props object will further have the props that this component is gonna use.)\r\n// (This below fxn will execute even BEFORE the component returns any JSX, to be precise, DURING build process BEFORE deployment)\r\n// This means that this fxn will prepare reqd. props data before any rendering. This should be called in 'pages' folder only.\r\n\r\nexport const getStaticProps = async () => {\r\n  // Fetch data from API\r\n  const client = await MongoClient.connect(\r\n    \"mongodb+srv://Ashish749:Greenarrow123@node-dev.w7b9d75.mongodb.net/Meetups?retryWrites=true&w=majority\"\r\n  );\r\n  const db = client.db();\r\n  const meetupsCollection = db.collection(\"Meetups\");\r\n  const meetups = await meetupsCollection.find().toArray();\r\n  client.close();\r\n\r\n  return {\r\n    props: {\r\n      meetups: meetups.map((meetup) => ({\r\n        title: meetup.title,\r\n        image: meetup.image,\r\n        address: meetup.address,\r\n        id: meetup._id.toString(),\r\n      })),\r\n    },\r\n    revalidate: 10, //This property will ensure that the outdated data gets regenerated every 10 secs\r\n  };\r\n};\r\n\r\n// SERVER-SIDE RENDERING METHOD FOR PRE-RENDERING OF DATA (This fxn will not run during build process like SSG, but this will\r\n// always run on the server AFTER deployment, therefore through 'context' arg, it gives access to req and res)\r\n// export const getServerSideProps = async (context) => {\r\n//   //Fetch data from API\r\n//   const req = context.req;\r\n//   const res = context.res;\r\n//   return {\r\n//     props: {\r\n//       meetups: DUMMY_MEETS,\r\n//     },\r\n//   };\r\n// };\r\n\r\nexport default HomePage;\r\n"]},"metadata":{},"sourceType":"module"}